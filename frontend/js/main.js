// Punto de entrada principal de la aplicaci√≥n

// Esperar a que el DOM est√© listo
document.addEventListener('DOMContentLoaded', () => {
    console.log('üéÆ Card Match Battle - Iniciando...');
    
    // Inicializar componentes
    inicializarAplicacion();
});

// Funci√≥n principal de inicializaci√≥n
function inicializarAplicacion() {
    try {
        // 1. Inicializar UI
        UI.inicializar();
        console.log('‚úÖ UI inicializada');

        // 2. Inicializar Game
        Game.inicializar();
        console.log('‚úÖ Game inicializado');

        // 3. Mostrar loading mientras se conecta
        UI.mostrarLoading();

        // 4. Inicializar Socket
        SocketManager.inicializar();
        console.log('‚úÖ Socket inicializado');

        // 5. Verificar si hay sesi√≥n activa
        verificarSesionActiva();

        console.log('üéâ Card Match Battle iniciado correctamente');
    } catch (error) {
        console.error('‚ùå Error al inicializar la aplicaci√≥n:', error);
        UI.mostrarNotificacion('Error al iniciar la aplicaci√≥n', 'error');
    }
}

// Verificar si hay una sesi√≥n activa
function verificarSesionActiva() {
    const sesion = Utils.obtener('sesion_juego');
    
    if (sesion && sesion.jugadorId && sesion.codigoPartida) {
        // Hay una sesi√≥n guardada, preguntar si quiere reconectar
        const reconectar = confirm(
            '¬øDeseas reconectar a tu √∫ltima partida?\n\n' +
            `C√≥digo: ${sesion.codigoPartida}`
        );

        if (reconectar) {
            // Intentar reconectar
            Game.jugadorId = sesion.jugadorId;
            Game.codigoPartida = sesion.codigoPartida;
            
            // Aqu√≠ podr√≠as implementar l√≥gica de reconexi√≥n
            // Por ahora simplemente limpiamos la sesi√≥n
            Utils.eliminar('sesion_juego');
            UI.mostrarNotificacion('Sesi√≥n anterior limpiada', 'info');
        } else {
            // Limpiar sesi√≥n
            Utils.eliminar('sesion_juego');
        }
    }
}

// Manejar cierre de ventana
window.addEventListener('beforeunload', (e) => {
    if (Game.estadoPartida && Game.estadoPartida.estado === 'jugando') {
        e.preventDefault();
        e.returnValue = '¬øEst√°s seguro de que quieres salir? Perder√°s tu progreso.';
        return e.returnValue;
    }
});

// Manejar errores globales
window.addEventListener('error', (e) => {
    console.error('Error global:', e.error);
    UI.mostrarNotificacion('Ha ocurrido un error inesperado', 'error');
});

// Prevenir clic derecho en producci√≥n (opcional)
// document.addEventListener('contextmenu', (e) => e.preventDefault());

// Detectar p√©rdida de foco (tab inactivo)
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        console.log('üîï Aplicaci√≥n en segundo plano');
    } else {
        console.log('üîî Aplicaci√≥n en primer plano');
    }
});

// Funci√≥n de ayuda para debugging (solo desarrollo)
if (window.location.hostname === 'localhost') {
    window.debugGame = {
        obtenerEstado() {
            console.log('Estado actual del juego:', Game.estadoPartida);
        },
        obtenerJugadorId() {
            console.log('ID del jugador:', Game.jugadorId);
        },
        obtenerCodigo() {
            console.log('C√≥digo de partida:', Game.codigoPartida);
        },
        limpiarSesion() {
            Utils.eliminar('sesion_juego');
            console.log('‚úÖ Sesi√≥n limpiada');
        },
        simularError() {
            throw new Error('Error simulado para pruebas');
        }
    };
    
    console.log('üõ†Ô∏è Modo desarrollo activado. Usa window.debugGame para debugging.');
}